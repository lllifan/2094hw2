.subclass ="get_val_error",
x= x)
}else{sqrt(x)}
}
log.2 = function(x){
if (x < 0){
rlang::abort(message = "ngative input, NA introduced",
.subclass ="get_val_error",
x= x)
}else{log2(x)}
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
f_operator = function(f){
force(f);
f = function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "invalid input",
.subclass = "invalid_input",
invalid_input = x))
}
}
return(f)
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
f_operator = function(f){
new_f = function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "invalid input",
.subclass = "invalid_input",
invalid_input = x))
}
}
return(new_f)
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
library(rlang)
f_operator <- function(f) {
function(x) {
if (inherits(f(x), "condition")) {
err <- f(x)
class(err) <- c("error", class(err))
catch_cnd(err, function(e) {
message(paste0("Error: ", attr(e, "message")))
return(c("invalid_input", x))
})
} else {
return(f(x))
}
}
}
(y = lapply(runif(2,-10,10), log.3))
f_operator = function(f){
force(f);
f = function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "invalid input",
.subclass = "invalid_input",
invalid_input = x))
}
}
return(f)
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
runif(2,-10,10)
set.seed(2)
runif(2,-10,10)
runif(2,-10,10)
runif(2,-10,10)
runif(2,-10,10)
runif(2,-10,10)
sqrt_3 = function(x){
if(x > 0){
sqrt(x)
}else{
rlang::catch_cnd(rlang::abort(message = "negative input and NA introduced!",
.subclass ="invalid_input",
invalid_input = x))
}
}
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
f_operator = function(f){
force(f)
f = function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "negative input, NA introduced!",
.subclass = "invalid_input",
invalid_input = x))
}
}
return(f)
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
cnd1 = catch_cnd(error("!")) #actually just define the condition object cnd1 as the build-in error condition object
str(cnd1)
Meta_data="toy example"
cnd1 = catch_cnd(abort(.subclass = "error_not_found",
message = "Path `blah.csv` not found",
path = "blah.csv",
any_metaData_you_want_to_add=Meta_data
))
cnd1
cnd1$any_metaData_you_want_to_add
cnd1$path
get_val <- function(){
val <- runif(1, -5, 5)
if (val < 1){
stop("Can't get val")
} else {
val
}
}
mult_val <- function(mult_by = 2){
x <- get_val()
x*mult_by
}
catch_cnd(mult_val3(val0 = 2))
library(ggplot2)
library(dplyr)
#read TCGA BRCA dataset
TCGAdata0 <- read.table('TCGA_breastCancer.txt',header=T)
subtypes <- as.character(unlist(TCGAdata0[1,]))
TCGAdataMatrix <- as.matrix(TCGAdata0[-1,])
## prepare data.frame
TCGAdata_ggplot <- data.frame(ACTR3B=as.numeric(TCGAdataMatrix['ACTR3B',]),
ANLN=as.numeric(TCGAdataMatrix['ANLN',]),
BAG12=as.numeric(TCGAdataMatrix['BAG1',])^2,
subtypes=subtypes)
TCGAdata_ggplot %>% ggplot()+ geom_point(aes(x=ACTR3B, y=ANLN))+facet_grid( . ~ subtypes) +
ggtitle("scatter plot of ACTR3B and ANLN")
TCGAdata_ggplot %>% ggplot()+ geom_point(aes(x=ACTR3B, y=ANLN, color = subtypes))+
ggtitle("scatter plot of ACTR3B and ANLN")
TCGAdata_ggplot %>% ggplot()+ geom_point(aes(x=ACTR3B, y=ANLN, color = subtypes, size  = BAG12))+
ggtitle("scatter plot of ACTR3B and ANLN")
TCGAdata_ggplot %>% ggplot()+ geom_histogram(aes(x=ACTR3B))+
ggtitle("histogram of ACTR3B")
TCGAdata_ggplot %>% ggplot()+ geom_histogram(aes(x=ACTR3B, fill = subtypes))+
ggtitle("histogram of ACTR3B")
TCGAdata_ggplot %>% ggplot()+ geom_histogram(aes(x=ACTR3B))+facet_grid(.~ subtypes)+
ggtitle("histogram of ACTR3B")
library(dplyr)
load("BRCA_data_for_Problem_2.Rdata")
Data2 <- data.frame(Data[["data"]])
subtypes <- Data[["subtype"]]
logfc <- apply(Data2, 1, function(x){mean(x[subtypes == "Her2"]) - mean(x[subtypes == "LumA_LumB"])})
pval <- apply(Data2, 1, function(x){t.test(x[subtypes == "Her2"],x[subtypes == 'LumA_LumB'])$p.value})
plotdata <- data.frame(logfc, pval)
plotdata$DE <- ifelse(plotdata$pval<0.05/2000, 'DE gene', 'non-DE gene' )
library(ggplot2)
plotdata %>% ggplot()+ geom_point(aes(x = logfc, y = -log10(pval),color = DE))+
ggtitle("DE genes of 'Her2 vs LumA_lumB'")
library(dplyr)
top3 <- plotdata %>% arrange(pval) %>% head(n=3)
top3
p1 <- plotdata %>% ggplot(aes(x = logfc, y = -log10(pval)))+
geom_point(aes(color = DE))+
ggtitle("DE genes of 'Her2 vs LumA_lumB'")+
geom_point(data=top3,
aes(x=logfc, y = -log10(pval)),
color='blue',
size=3)
p1
library(Rtsne)
load("BRCA_data_for_Problem_2.Rdata")
x<-Data$data
set.seed(15213) # for reproducibility
#when doing t-SNE, rows should be samples and column should be genes
tsne <- Rtsne(t(x), dims = 2, perplexity=10, verbose=TRUE, max_iter = 5000)
tsne$Y#This is the two dimenional data we finally get.
logfc2 <- apply(Data2, 1, function(x){mean(x[subtypes == "Basal"]) - mean(x[subtypes == "LumA_LumB"])})
pval2 <- apply(Data2, 1, function(x){t.test(x[subtypes == "Basal"],x[subtypes == 'LumA_LumB'])$p.value})
plotdata2 <- data.frame(logfc2, pval2)
plotdata2$DE <- ifelse(plotdata2$pval2<0.05/2000, 'DE gene', 'non-DE gene' )
top3_2 <- plotdata2 %>% arrange(pval2) %>% head(n=3)
p2 <- plotdata2 %>% ggplot(aes(x = logfc2, y = -log10(pval2)))+
geom_point(aes(color = DE))+
ggtitle("DE genes of 'Basal vs LumA_lumB'")+
geom_point(data=top3_2,
aes(x=logfc2, y = -log10(pval2)),
color='blue',
size=3)
p2
logfc3 <- apply(Data2, 1, function(x){mean(x[subtypes == "Basal"]) - mean(x[subtypes == "Her2"])})
pval3 <- apply(Data2, 1, function(x){t.test(x[subtypes == "Basal"],x[subtypes == 'Her2'])$p.value})
plotdata3 <- data.frame(logfc3, pval3)
plotdata3$DE <- ifelse(plotdata3$pval3 <0.05/2000, 'DE gene', 'non-DE gene' )
top3_3 <- plotdata3 %>% arrange(pval3) %>% head(n=3)
p3 <- plotdata3 %>% ggplot(aes(x = logfc3, y = -log10(pval3)))+
geom_point(aes(color = DE))+
ggtitle("DE genes of 'Basal vs Her2'")+
geom_point(data=top3_3,
aes(x=logfc3, y = -log10(pval3)),
color='blue',
size=3)
p3
library(Rtsne)
load("BRCA_data_for_Problem_2.Rdata")
x<-Data$data
set.seed(15213) # for reproducibility
#when doing t-SNE, rows should be samples and column should be genes
tsne <- Rtsne(t(x), dims = 2, perplexity=10, verbose=TRUE, max_iter = 5000)
tsne$Y#This is the two dimenional data we finally get.
plotdata4 <- data.frame(tsne$Y, subtypes = subtypes)
p4 <- ggplot(data = plotdata4, aes(x=X1, y= X2, color = subtypes))+ geom_point()+
stat_ellipse()+
ggtitle("TSNE")
p4
library(cowplot)
plot_grid(p1, p2, p3,p4)#,labes = c("Her2 vs LumA_LumB", "Her2 vs Basal", )
library(dplyr)
top3 <- plotdata %>% arrange(pval) %>% head(n=3)
top3
p1 <- plotdata %>% ggplot(aes(x = logfc, y = -log10(pval)))+
geom_point(aes(color = DE))+
ggtitle("DE genes of 'Her2 vs LumA_lumB'")+
geom_point(data=top3,
aes(x=logfc, y = -log10(pval)),
color='blue',
size=3)+
geom_text_repel(label = row.names(top3), data = top3)
library(ggrepel)
p1 <- plotdata %>% ggplot(aes(x = logfc, y = -log10(pval)))+
geom_point(aes(color = DE))+
ggtitle("DE genes of 'Her2 vs LumA_lumB'")+
geom_point(data=top3,
aes(x=logfc, y = -log10(pval)),
color='blue',
size=3)+
geom_text_repel(label = row.names(top3), data = top3)
p1
logfc2 <- apply(Data2, 1, function(x){mean(x[subtypes == "Basal"]) - mean(x[subtypes == "LumA_LumB"])})
pval2 <- apply(Data2, 1, function(x){t.test(x[subtypes == "Basal"],x[subtypes == 'LumA_LumB'])$p.value})
plotdata2 <- data.frame(logfc2, pval2)
plotdata2$DE <- ifelse(plotdata2$pval2<0.05/2000, 'DE gene', 'non-DE gene' )
top3_2 <- plotdata2 %>% arrange(pval2) %>% head(n=3)
p2 <- plotdata2 %>% ggplot(aes(x = logfc2, y = -log10(pval2)))+
geom_point(aes(color = DE))+
ggtitle("DE genes of 'Basal vs LumA_lumB'")+
geom_point(data=top3_2,
aes(x=logfc2, y = -log10(pval2)),
color='blue',
size=3)+
geom_text_repel(label = row.names(top3_2), data = top3_2)
p2
logfc3 <- apply(Data2, 1, function(x){mean(x[subtypes == "Basal"]) - mean(x[subtypes == "Her2"])})
pval3 <- apply(Data2, 1, function(x){t.test(x[subtypes == "Basal"],x[subtypes == 'Her2'])$p.value})
plotdata3 <- data.frame(logfc3, pval3)
plotdata3$DE <- ifelse(plotdata3$pval3 <0.05/2000, 'DE gene', 'non-DE gene' )
top3_3 <- plotdata3 %>% arrange(pval3) %>% head(n=3)
p3 <- plotdata3 %>% ggplot(aes(x = logfc3, y = -log10(pval3)))+
geom_point(aes(color = DE))+
ggtitle("DE genes of 'Basal vs Her2'")+
geom_point(data=top3_3,
aes(x=logfc3, y = -log10(pval3)),
color='blue',
size=3)+
geom_text_repel(label = row.names(top3_3), data = top3_3)
p3
f_operator = function(f){
force(f)
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "negative input, NA introduced!",
.subclass = "invalid_input",
invalid_input = x))
cdn
}
}
return(f)
f_operator = function(f){
force(f)
function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "negative input, NA introduced!",
.subclass = "invalid_input",
invalid_input = x))
cdn
}
}
return(f)
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
f_operator = function(f){
function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "negative input, NA introduced!",
.subclass = "invalid_input",
invalid_input = x))
cdn
}
}
return(f)
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
lapply(runif(20,-10,5), sqrt.2)
f_operator = function(f){
function(x){
if (is.numeric(x) && x > 0){
f(x)
} else {
cnd1 = catch_cnd(abort(.subclass = "invalid input",
message = "invalid input",
invalid_input = x
))
cnd1
}
}
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
f_operator = function(f){
function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "negative input, NA introduced!",
.subclass = "invalid_input",
invalid_input = x))
cdn
}
}
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
f_operator = function(f){
function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "negative input, NA introduced!",
.subclass = "invalid_input",
invalid_input = x))
cnd
}
return(x)
}
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
# [[1]]
# <error/invalid input>
# invalid input
# Backtrace:
#   1. base::lapply(runif(2, -10, 10), log3)
#   2. FUN(X[[i]], ...)
#   3. base::tryCatch(...)
#   4. base:::tryCatchList(expr, classes, parentenv, handlers)
#   5. base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
#   6. value[[3L]](cond)
#   7. rlang::catch_cnd(...)
#  13. base::force(expr)
#
# [[2]]
# [1] 1.398095
# y[[1]]$invalid_input
# [1] -6.302355
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
# y[[1]]$invalid_input
# [1] -6.302355
f_operator = function(f){
function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "negative input, NA introduced!",
.subclass = "invalid_input",
invalid_input = x))
cnd
}
}
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
# [[1]]
# <error/invalid input>
# invalid input
# Backtrace:
#   1. base::lapply(runif(2, -10, 10), log3)
#   2. FUN(X[[i]], ...)
#   3. base::tryCatch(...)
#   4. base:::tryCatchList(expr, classes, parentenv, handlers)
#   5. base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
#   6. value[[3L]](cond)
#   7. rlang::catch_cnd(...)
#  13. base::force(expr)
#
# [[2]]
# [1] 1.398095
# y[[1]]$invalid_input
# [1] -6.302355
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
# y[[1]]$invalid_input
# [1] -6.302355
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
f_operator = function(f){
function(x){
if(x>0){
f(x)
}else{
cnd = catch_cnd(rlang::abort(
message = "invalid input",
.subclass = "invalid_input",
invalid_input = x))
cnd
}
}
}
sqrt.3 = f_operator(sqrt.2)
log.3 = f_operator(log.2)
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
# [[1]]
# <error/invalid input>
# invalid input
# Backtrace:
#   1. base::lapply(runif(2, -10, 10), log3)
#   2. FUN(X[[i]], ...)
#   3. base::tryCatch(...)
#   4. base:::tryCatchList(expr, classes, parentenv, handlers)
#   5. base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
#   6. value[[3L]](cond)
#   7. rlang::catch_cnd(...)
#  13. base::force(expr)
#
# [[2]]
# [1] 1.398095
# y[[1]]$invalid_input
# [1] -6.302355
set.seed(2)
(y = lapply(runif(2,-10,10), sqrt.3))
# y[[1]]$invalid_input
# [1] -6.302355
set.seed(2)
(y = lapply(runif(2,-10,10), log.3))
(y = lapply(runif(2,-10,10), sqrt.3))
library(Rtsne)
load("BRCA_data_for_Problem_2.Rdata")
x<-Data$data
set.seed(15213) # for reproducibility
#when doing t-SNE, rows should be samples and column should be genes
tsne <- Rtsne(t(x), dims = 2, perplexity=10, verbose=TRUE, max_iter = 5000)
tsne$Y#This is the two dimenional data we finally get.
plotdata4 <- data.frame(tsne$Y, subtypes = subtypes)
p4 <- ggplot(data = plotdata4, aes(x=X1, y= X2, color = subtypes))+ geom_point()+
stat_ellipse()+
ggtitle("TSNE")
p4
library(cowplot)
plot_grid(p1, p2, p3,p4)#,labes = c("Her2 vs LumA_LumB", "Her2 vs Basal", )
library(devtools)
load_all()
